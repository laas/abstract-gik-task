#ifndef JRL_GIK_WHOLE_BODY_MOTION_PLANNER_H
#define JRL_GIK_WHOLE_BODY_MOTION_PLANNER_H

#include "jrlGikStateConstraint.h"
#include "jrlGikMotionConstraint.h"
#include "jrlRobot/jrlRobotMotion.h"

/**
\brief A Whole body motion planner takes in state or motion constraints to define a whole body motion task and solve it.
 */

class CjrlGikWholeBodyMotionPlanner
{
    public:
    /**
        \name Definition
        @{
     */
    /**
        \brief Get associated robot
     */
        virtual CjrlHumanoidDynamicRobot& robot()const =0 ;

    /**
        \brief Resets the planner by clearing entered constraints, computed task plans and motions.
     */
        virtual void reset() = 0;
    
    /**
        \brief Add a prioritized state constraint. The state constraint is transformed by the implemented algorithms into motion subtasks which are added to the whole body motion task.
     */
        virtual bool addStateConstraint(const CjrlGikStateConstraint& inStateConstraint, unsigned int inPriority) = 0;

    /**
        \brief Add a prioritized motion constraint. The motion constraint is inserted as-is to the whole body motion task. Simultaneous motion subtasks might be generated by the implemented algorithms.
     */
        virtual bool addMotionConstraint(const CjrlGikMotionConstraint& inMotionConstraint, unsigned int inPriority) = 0;
    /**
        @}
     */

    /**
        \name Resolution
        @{
     */
    
    /**
        \brief Makes the robot recover its straightness, normal waist height and symmetrical support polygon, so a step back might be generated if necessary. This does not mean the exact "half-sitting" configuration will be recovered. Note that this method calls reset().
     */
        virtual bool recoverUprightStance() = 0;

    /**
        \brief Compute a motion complying with the constraints contained in whole body motion task.
     */
        virtual bool solve() = 0;

    /**
        \brief Get resulting joint motion of robot.
     */
        virtual const CjrlRobotMotion& solutionMotion() = 0;
    /**
        @}
     */
    /**
        \brief Destructor
     */
        virtual ~CjrlGikWithinOneStepMotionPlanner() =0;
    
};

#endif
